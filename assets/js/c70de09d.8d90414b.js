"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[825],{8375:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a pending future.","params":[],"returns":[{"desc":"","lua_type":"Future<T...>"}],"function_type":"static","tags":["Constructors"],"source":{"line":34,"path":"src/init.luau"}},{"name":"completed","desc":"Creates a completed future.","params":[{"name":"...","desc":"The completed values.","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"Future<T...>"}],"function_type":"static","tags":["Constructors"],"source":{"line":53,"path":"src/init.luau"}},{"name":"delay","desc":"Creates a future and completes with the provided values after `sec` seconds.","params":[{"name":"sec","desc":"How long to delay until the future completes.","lua_type":"number"},{"name":"...","desc":"The completed values.","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"Future<T...>"}],"function_type":"static","tags":["Constructors"],"source":{"line":69,"path":"src/init.luau"}},{"name":"fromSignal","desc":"Creates a new future that completes when the provided signal fires and when the predicate (if provided) passes.\\n\\n```lua\\nFuture.fromSignal(game:GetService(\\"Players\\").PlayerAdded, function(player)\\n\\treturn player.UserId == 1 -- only complete when player w/ UserId == 1 joins the game!\\nend)\\n```","params":[{"name":"signal","desc":"Something with similar connect method structure to RbxScriptSignal<T...>","lua_type":"Signal<T...>"},{"name":"predicate","desc":"","lua_type":"((T...) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Future<T...>"}],"function_type":"static","tags":["Constructors"],"source":{"line":95,"path":"src/init.luau"}},{"name":"race","desc":"Creates a new future that completes with the values from the first future to complete in the provided array.","params":[{"name":"futures","desc":"","lua_type":"{ Future<T...> }"}],"returns":[{"desc":"","lua_type":"Future<T...>"}],"function_type":"static","tags":["Constructors"],"source":{"line":125,"path":"src/init.luau"}},{"name":"all","desc":"Creates a new future that completes when all the provided futures have completed.\\n\\nThe completed value is an array containing the input futures in the order they completed.\\n\\n```lua\\nlocal f1 = Future.delay(1, \\"foo\\")\\nlocal f2 = Future.completed(\\"bar\\")\\nFuture.all({ f1, f2 }):expect() -- { f2, f1 }\\n```","params":[{"name":"futures","desc":"","lua_type":"{ Future<T...> }"}],"returns":[{"desc":"","lua_type":"Future<{ Future<T...> }>"}],"function_type":"static","tags":["Constructors"],"source":{"line":170,"path":"src/init.luau"}},{"name":"packAsCallback","desc":"Packs a list of values into a callback that returns the values when called.\\n\\n```lua\\nlocal unpackCallback = Future.packAsCallback(1, \\"foo\\", true)\\nlocal a, b, c = unpackCallback() -- number, string, boolean\\n```","params":[{"name":"...","desc":"The completed values.","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"() -> (T...)"}],"function_type":"static","tags":["Static Methods"],"source":{"line":212,"path":"src/init.luau"}},{"name":"isCompleted","desc":"Returns whether the future has been completed or not.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Methods"],"source":{"line":230,"path":"src/init.luau"}},{"name":"complete","desc":"Completes the future with the provided values.\\n\\nThis method will error if the future has already been completed.","params":[{"name":"...","desc":"The completed values.","lua_type":"T..."}],"returns":[],"function_type":"method","tags":["Methods"],"source":{"line":245,"path":"src/init.luau"}},{"name":"expect","desc":"Yields until the future is complete and returns the completed values.","params":[],"returns":[{"desc":"The completed values.","lua_type":"T..."}],"function_type":"method","tags":["Methods"],"source":{"line":271,"path":"src/init.luau"}}],"properties":[],"types":[],"name":"Future","desc":"A simple future class used as an abstraction for defining eventual values that result from asynchronous computations.","source":{"line":8,"path":"src/init.luau"}}')}}]);