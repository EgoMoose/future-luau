{"searchDocs":[{"title":"Future","type":0,"sectionRef":"#","url":"/future-luau/api/Future","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#new","content":"Constructors &lt;/&gt; Future.new() → Future&lt;T...&gt; Creates a pending future.  ","version":null,"tagName":"h3"},{"title":"completed​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#completed","content":"Constructors &lt;/&gt; Future.completed( ...: T...-- The completed values. ) → Future&lt;T...&gt; Creates a completed future.  ","version":null,"tagName":"h3"},{"title":"spawn​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#spawn","content":"Constructors &lt;/&gt; Future.spawn( callback: (A...) → (T...), ...: A... ) → Future&lt;T...&gt; Creates a future that completes with the return values from the provided function. local function getNameFromUserIdAsync(userId: number) return game.Players:GetNameFromUserIdAsync(userId) end local f = Future.spawn(getNameFromUserIdAsync, 1) print(f:expect()) -- Roblox   ","version":null,"tagName":"h3"},{"title":"delay​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#delay","content":"Constructors &lt;/&gt; Future.delay( sec: number,-- How long to delay until the future completes. ...: T...-- The completed values. ) → Future&lt;T...&gt; Creates a future and completes with the provided values after sec seconds.  ","version":null,"tagName":"h3"},{"title":"fromSignal​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#fromSignal","content":"Constructors &lt;/&gt; Future.fromSignal( signal: Signal&lt;T...&gt;,-- Something with similar connect method structure to RbxScriptSignal&lt;T...&gt; predicate: ((T...) → boolean)? ) → Future&lt;T...&gt; Creates a new future that completes when the provided signal fires and when the predicate (if provided) passes. Future.fromSignal(game:GetService(&quot;Players&quot;).PlayerAdded, function(player) return player.UserId == 1 -- only complete when player w/ UserId == 1 joins the game! end)   ","version":null,"tagName":"h3"},{"title":"race​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#race","content":"Constructors &lt;/&gt; Future.race(futures: {Future&lt;T...&gt;}) → Future&lt;T...&gt; Creates a new future that completes with the values from the first future to complete in the provided array.  ","version":null,"tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#all","content":"Constructors &lt;/&gt; Future.all(futures: {Future&lt;T...&gt;}) → Future&lt;{Future&lt;T...&gt;}&gt; Creates a new future that completes when all the provided futures have completed. The completed value is an array containing the input futures in the order they completed. local f1 = Future.delay(1, &quot;foo&quot;) local f2 = Future.completed(&quot;bar&quot;) Future.all({ f1, f2 }):expect() -- { f2, f1 }   ","version":null,"tagName":"h3"},{"title":"packAsCallback​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#packAsCallback","content":"Static Methods &lt;/&gt; Future.packAsCallback( ...: T...-- The completed values. ) → () → (T...) Packs a list of values into a callback that returns the values when called. local unpackCallback = Future.packAsCallback(1, &quot;foo&quot;, true) local a, b, c = unpackCallback() -- number, string, boolean   ","version":null,"tagName":"h3"},{"title":"isCompleted​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#isCompleted","content":"Methods &lt;/&gt; Future:isCompleted() → boolean Returns whether the future has been completed or not.  ","version":null,"tagName":"h3"},{"title":"complete​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#complete","content":"Methods &lt;/&gt; Future:complete( ...: T...-- The completed values. ) → () Completes the future with the provided values. This method will error if the future has already been completed.  ","version":null,"tagName":"h3"},{"title":"expect​","type":1,"pageTitle":"Future","url":"/future-luau/api/Future#expect","content":"Methods &lt;/&gt; Future:expect() → T...-- The completed values. Yields until the future is complete and returns the completed values. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}